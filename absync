#!/usr/bin/python
# encoding:utf-8
"""
absync.py

Created by Jay Soffian on 2008-12-01.
Copyright (c) 2007 Jay Soffian. All rights reserved.
"""

import sys
import getopt
import codecs
from types import ListType
import urllib

try:
    import ldap
    import ldap.filter
except ImportError:
    sys.stderr.write(
"""python-ldap is required for operation. Installation instructions:
sudo /usr/bin/easy_install python-ldap
""")
    sys.exit(2)

try:
    import appscript
    from appscript import its, k
except ImportError:
    sys.stderr.write(
"""appscript is required for operation. Installation instructions:
sudo /usr/bin/easy_install appscript
""")

from AddressBook import *

LDAP_URL   = "ldap://ldap.example.com:389"
LDAP_BASE  = "ou=people,o=example.com"
LDAP_SCOPE = ldap.SCOPE_SUBTREE
DEFAULT_GROUP = "Example"
DW_URL = "https://directoryworks.example.com/" + \
         "protected/people/view/person/normal/?dn=%s"

help_message = '''
Usage: absync -q/--query <query> [--preview]
       absync -g/--group <group> [--preview]
       absync [--preview]
       absync -h/--help

Options:
 -h/--help           Show this message
 -n/--preview        Only show what would be done
 -g/--group <group>  The name of an Address Book group for syncing
 -q/--query <query>  An LDAP query to select contacts for syncing

Default is "-g Example" if neither -g nor -q are given.
'''

class Error(Exception):
    pass

class SyncError(Error):
    pass

class LdapPerson(dict):
    def __init__(self, dn, d):
        super(LdapPerson, self).__init__(d)
        self._dn = dn
    
    def __getattr__(self, name):
        try:
            return [s.decode('utf-8') for s in self[name]]
        except KeyError:
            return []
    
    def get_value(self, name, default=None):
        try:
            v = self[name]
            assert len(v) == 1
            return v[0].decode('utf-8')
        except KeyError:
            return default

class AddressBookSync(object):
    
    def __init__(self, read_only=False):
        self._ab   = appscript.app("Address Book")
        self._ldap = ldap.initialize(LDAP_URL)
        self._ldap.simple_bind_s()
        self._ro = read_only
    
    def sync_query(self, query):
        mapping = {
            "first_name"  : "givenName",
            "middle_name" : "middleName",
            "last_name"   : "sn",
            "suffix"      : "generationQualifier",
        }
        print "Querying LDAP..."
        ds_people = [LdapPerson(ds, d) for ds, d in
                     self._ldap.search_s(LDAP_BASE, LDAP_SCOPE, query)]
        for ds_person in sorted(ds_people, key=lambda x:x.get_value("cn")):
            uid = ds_person.get_value("uid")
            print uid
            ab_people = self._ab.people[its.emails.value.contains(uid)]()
            print len(ab_people)
            if len(ab_people) > 1:
                print \
                    "Skipping %s. <%s> contained by %s Address Book contacts" \
                    % (ds_person.get_value("cn"), uid, len(ab_people))
                continue
            if len(ab_people) == 1:
                ab_person = ab_people[0]
                self.sync_person(ab_person, ds_person)
                continue
            print "New Address Book entry"
            d = {}
            for ab_attr, ds_attr in mapping.items():
                v = cleanup_name(ds_person.get_value(ds_attr, ''))
                d[getattr(k, ab_attr)] = v or k.missing_value
            if self._ro:
                print "+ %s" % ds_person.get_value("cn")
                continue
            ab_person = self._ab.make(new=k.person, with_properties=d)
            try:
                self.sync_person(ab_person, ds_person)
            except SyncError, e:
                print e
                self.sync_note(ab_person, "Sync Status: ", str(e))
    
    def sync_group(self, groupname):
        
        groups = self._ab.groups[its.name == groupname]()
        
        if not groups:
            raise Error("Please create an Address Book group named ‘%s’."
                        % groupname)
        
        if len(groups) > 1:
            raise Error(
                "Please ensure there is only a Address Book group named ‘%s’."
                % groupname)
        
        for ab_person in sorted(groups[0].people(), key=lambda x:x.name()):
            try:
                self.sync_person(ab_person)
            except SyncError, e:
                print e
                self.sync_note(ab_person, "Sync Status: ", str(e))
    
    def sync_person(self, ab_person, ds_person=None):
        print "%s" % (ab_person.name(),)
        if ds_person is None:
            ds_person = self.query_ldap(
                            self.construct_query_for_person(ab_person))
        self.sync_name(ab_person, ds_person)
        self.sync_title(ab_person, ds_person)
        self.sync_value(ab_person, "organization", ds_person.o)
        self.sync_value(ab_person, "department", ds_person.exampleBusinessUnit)
        self.sync_address(ab_person, ds_person)
        self.sync_emails(ab_person, ds_person)
        self.sync_phones(ab_person, ds_person)
        # self.sync_jabber(ab_person, ds_person)
        self.sync_manager(ab_person, ds_person)
        self.sync_dsurl(ab_person, ds_person)
        self.sync_aboutme(ab_person, ds_person)
        self.sync_status(ab_person, ds_person)
    
    def sync_status(self, ab_person, ds_person):
        status = ds_person.get_value("exampleStatus")
        if status and status != "Active":
            self.sync_note(ab_person, "Example Status: ", status)
    
    def sync_aboutme(self, ab_person, ds_person):
        aboutme = ds_person.get_value("exampleDisplayNameExtension", '')
        self.sync_note(ab_person, "About Me: ", aboutme)
    
    def sync_manager(self, ab_person, ds_person):
        manager_dn = ds_person.get_value("manager")
        if not manager_dn:
            return
        # uid=john.doe@example.com,ou=People,o=example.com
        query = '(%s)' % manager_dn.split(',')[0]
        ds_manager = self.query_ldap(query)
        cur_values = ab_person.related_names[its.label == "manager"].value()
        new_values = [
            ' '.join(map(cleanup_name, ds_manager.get_value("cn", '').split()))]
        print cur_values
        print new_values
        self.sync_values(ab_person, "related_name", "manager",
                         cur_values, new_values)
    
    def sync_name(self, ab_person, ds_person):
        mapping = {
            "first_name"  : "givenName",
            "middle_name" : "middleName",
            "last_name"   : "sn",
            "suffix"      : "generationQualifier",
        }
        for ab_attr in mapping:
            self.sync_value(
                ab_person, ab_attr,
                cleanup_name(ds_person.get_value(mapping[ab_attr], '')))
        given_name = ds_person.get_value("givenName", '')
        legal_name = ds_person.get_value("exampleLegalName", '')
        if not legal_name.lower().startswith(given_name.lower()):
            self.sync_note(ab_person, "Legal Name: ", cleanup_name(legal_name))
            # self.sync_value(ab_person, "nickname", cleanup_name(legal_name))
    
    def sync_dsurl(self, ab_person, ds_person):
        cur_values = ab_person.urls[its.label == "work"].value()
        new_values = [DW_URL % urllib.quote(ds_person._dn)]
        self.sync_values(ab_person, "url", "work", cur_values, new_values)
    
    def sync_title(self, ab_person, ds_person):
        title = ds_person.title
        if not title:
            title = []
            title.extend(ds_person.exampleJobFamily)
            title.extend(ds_person.exampleJobFunction)
            title = ' - '.join(title)
        self.sync_value(ab_person, "job_title", title)

    # Example.com doesn't use Jabber anymore
    # def sync_jabber(self, ab_person, ds_person):
    #     cur_values = ab_person.Jabber_handles[
    #         its.label == "work" and its.value.endswith("example.com")].value()
    #     new_values = ds_person.jabberID
    #     self.sync_values(ab_person, "Jabber_handle", "work", cur_values,
    #                      new_values)
    
    def sync_phones(self, ab_person, ds_person):
        mapping = {"work"   : "telephoneNumber",
                   "mobile" : "mobile",
                   "other"  : "alternateTelephoneNumber"}
        cur_phones = {}
        for phone in ab_person.phones():
            label = phone.label()
            if label in mapping:
                cur_phones.setdefault(label, []).append(phone.value())
        for label in mapping:
            cur_values = cur_phones.get(label, [])
            new_values = map(cleanup_phone, ds_person.get(mapping[label], []))
            if new_values:
                self.sync_values(ab_person, "phone", label, cur_values,
                                 new_values)
    
    def sync_emails(self, ab_person, ds_person):
        cur_values = ab_person.emails[
            its.label == "work" and its.value.endswith("example.com")].value()
        new_values = ds_person.mail
        self.sync_values(ab_person, "email", "work", cur_values, new_values)
    
    def sync_address(self, ab_person, ds_person):
        mapping = {
            k.city         :"l",
            k.country      :"co",
            k.country_code :"c",
            k.state        :"st",
            k.street       :"street",
            k.zip          :"postalCode",
        }
        new_address = {}
        for ab_attr, ds_attr in mapping.items():
            new_address[ab_attr] = ds_person.get_value(ds_attr, k.missing_value)
        old_addresses = ab_person.addresses[its.label == "work"]()
        if len(old_addresses) == 1:
            old_address = dict([t for t in old_addresses[0].properties().items()
                                if t[0] in new_address])
            if old_address == new_address:
                return
        for old_address in old_addresses:
            print "- address: %s" % (raddress(old_address.properties()))
            if not self._ro:
                old_address.delete()
        if filter(lambda x: x != k.missing_value, new_address.values()):
            print "+ address: %s" % raddress(new_address)
            new_address[k.label] = "work"
            if not self._ro:
                ab_person.make(new=k.address, with_properties=new_address)
    
    def sync_note(self, ab_person, prefix, suffix):
        new_note = []
        appended = False
        for line in cleanup_value(ab_person.note(), '').splitlines():
            if line.startswith(prefix):
                if suffix and not appended:
                    appended = True
                    new_note.append(prefix + suffix)
            else:
                new_note.append(line)
        if suffix and not appended:
            new_note.append(prefix + suffix)
        self.sync_value(ab_person, "note", '\n'.join(new_note))
    
    def sync_value(self, ab_person, name, new_value):
        attr = getattr(ab_person, name)
        cur_value = cleanup_value(attr.get())
        if isinstance(new_value, ListType):
            new_value = new_value and new_value[0]
        new_value = new_value or None
        if cur_value != new_value:
            if cur_value:
                print "- %s: %s" % (name, rstr(cur_value))
            if new_value:
                print "+ %s: %s" % (name, rstr(new_value))
            if not self._ro:
                attr.set(new_value or k.missing_value)
    
    def sync_values(self, ab_person, name, label, cur_values, new_values):
        if sorted(cur_values) == sorted(new_values):
            return
        for v in cur_values:
            if v not in new_values:
                print "- %s: %s (%s)" % (name, rstr(v), label)
                if not self._ro:
                    getattr(ab_person, name+'s')[its.label == label and
                                                 its.value == v].delete()
        for v in new_values:
            if v not in cur_values:
                print "+ %s: %s (%s)" % (name, rstr(v), label)
                if not self._ro:
                    ab_person.make(new=getattr(k, name),
                                   with_properties={k.label:label, k.value:v})
    
    def query_ldap(self, query):
        results = self._ldap.search_s(LDAP_BASE, LDAP_SCOPE, query)
        if not results:
            raise SyncError("Cannot locate person for query: %s" % query)
        if len(results) > 1:
            raise SyncError("More than one person matches query: %s\n\t%s" %
                            (query, '\n\t'.join([r[0] for r in results])))
        return LdapPerson(*results[0])
    
    def construct_query_for_person(self, ab_person):
        emails = ab_person.emails[its.label == "work" and
                                  its.value.endswith("@example.com")].value()
        return "(&(objectClass=inetOrgPerson)(|%s))" % (
            ''.join(["(mail=%s)" % ldap.filter.escape_filter_chars(e)
                     for e in emails]))
def raddress(d):
    fields = (k.street, k.city, k.state, k.zip, k.country, k.country_code)
    return ' $ '.join(map(lambda v:cleanup_value(v, ''),
                          [d[field] for field in fields]))

def rstr(s):
    return repr(str(s))[1:-1]

def cleanup_value(v, default=None):
    if v == k.missing_value:
        return default
    else:
        return v

def cleanup_name(s):
    if s.upper() == 'III':
        return s.upper()
    if len(s) > 2 and (s.islower() or s.isupper()):
        return s.title()
    else:
        return s

def cleanup_phone(s):
    digits = ''.join([c for c in s if c.isdigit()])
    if len(digits) == 10:
        return digits
    elif len(digits) == 11 and digits[0] == '1':
        return digits[1:]
    else:
        return s

def show_usage(msg=None, usage=None):
    p = sys.argv[0].split("/")[-1]
    if usage:
        usage = '\n'.join(usage.split('\n')[1:])
        sys.stderr.write(usage)
        return 0
    if msg:
        sys.stderr.write("%s: %s\n" % (p, str(msg)))
    sys.stderr.write("%s: try '%s --help' for more information\n" % (p, p))
    return 2

def main(args):
    sopts = "hng:q:"
    lopts = ["help", "preview", "group=", "query="]
    try:
        opts, args = getopt.getopt(args, sopts, lopts)
    except getopt.error, msg:
        return show_usage(msg)
    
    read_only = False
    opt_group = None
    opt_query = None
    
    for opt, val in opts:
        if opt in ("-h", "--help"):
            return show_usage(usage=help_message)
        elif opt in ("-n", "--preview"):
            read_only = True
        elif opt in ("-g", "--group"):
            opt_group = val
        elif opt in ("-q", "--query"):
            opt_query = val
    
    if opt_query and opt_group:
        return show_usage("Use --group (-g) or --query (-q), not both.")
    
    if opt_query:
        AddressBookSync(read_only).sync_query(opt_query)
    else:
        AddressBookSync(read_only).sync_group(opt_group or DEFAULT_GROUP)

if __name__ == '__main__':
    if sys.stdout.encoding is None:
        sys.stdout = codecs.getwriter('utf-8')(sys.stdout)
    try:
        sys.exit(main(sys.argv[1:]))
    except KeyboardInterrupt:
        print
        sys.exit(0)
